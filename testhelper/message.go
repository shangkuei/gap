package helper

import (
	"fmt"
	"runtime"
	"strings"
	"unicode"
	"unicode/utf8"
)

var (
	Trace = false
)

type TestingT interface {
	Helper()
	Name() string
}

// Message returns a formatted error message with the given message and lines.
func Message(t TestingT, msg string, lines ...string) string {
	t.Helper()

	var messages []string
	messages = append(messages, "")
	messages = append(messages, fmt.Sprintf("Message: %s", msg))
	messages = append(messages, fmt.Sprintf("Case: %s", t.Name()))
	if Trace {
		if callers := callers(); len(callers) > 0 {
			messages = append(messages, "Error Trace:")
			for _, caller := range callers {
				messages = append(messages, fmt.Sprint("\t"+caller))
			}
		}
	}
	messages = append(messages, lines...)
	return strings.Join(messages, "\n")
}

// callers returns an array of strings containing the file and line number
// of each stack frame leading from the current test to the assert call that
// failed.
func callers() []string {
	var (
		pc   uintptr
		ok   bool
		file string
		line int
		name string
	)

	callers := []string{}
	for i := 2; ; i++ {
		pc, file, line, ok = runtime.Caller(i)
		if !ok {
			// The breaks below failed to terminate the loop, and we ran off the
			// end of the call stack.
			break
		}

		// This is a huge edge case, but it will panic if this is the case, see #180
		if file == "<autogenerated>" {
			break
		}

		f := runtime.FuncForPC(pc)
		if f == nil {
			break
		}
		name = f.Name()

		// testing.tRunner is the standard library function that calls
		// tests. Subtests are called directly by tRunner, without going through
		// the Test/Benchmark/Example function that contains the t.Run calls, so
		// with subtests we should break when we hit tRunner, without adding it
		// to the list of callers.
		if name == "testing.tRunner" {
			break
		}

		parts := strings.Split(name, "/")
		length := len(parts)
		callers = append(callers, fmt.Sprintf("%s:%d %s", file, line, parts[length-1]))

		// Drop the package
		segments := strings.Split(name, ".")
		name = segments[len(segments)-1]
		if isTest(name, "Test") ||
			isTest(name, "Benchmark") ||
			isTest(name, "Example") {
			break
		}
	}

	return callers
}

// isTest tells whether name looks like a test (or benchmark, according to prefix).
// It is a Test (say) if there is a character after Test that is not a lower-case letter.
// We don't want TesticularCancer.
func isTest(name, prefix string) bool {
	if !strings.HasPrefix(name, prefix) {
		return false
	}
	if len(name) == len(prefix) { // "Test" is ok
		return true
	}
	r, _ := utf8.DecodeRuneInString(name[len(prefix):])
	return !unicode.IsLower(r)
}
